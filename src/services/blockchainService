import Web3 from 'web3';
import detectEthereumProvider from '@metamask/detect-provider';
import FileEncryptionRegistryABI from '../../blockchain/contracts/FileEncryptionRegistry.json';

class BlockchainService {
  constructor() {
    this.web3 = null;
    this.contract = null;
    this.account = null;
    this.networkId = null;
  }

  async initMetaMask() {
    try {
      // Detect Ethereum provider
      const provider = await detectEthereumProvider();

      if (!provider) {
        console.error('Please install MetaMask');
        return false;
      }

      if (provider !== window.ethereum) {
        console.error('Multiple wallets installed');
        return false;
      }

      // Request account access
      await window.ethereum.request({ method: 'eth_requestAccounts' });

      // Initialize Web3
      this.web3 = new Web3(window.ethereum);

      // Get current account
      const accounts = await this.web3.eth.getAccounts();
      this.account = accounts[0];

      // Get network ID
      this.networkId = await this.web3.eth.net.getId();

      // Load contract
      const deployedNetwork = FileEncryptionRegistryABI.networks[this.networkId];
      
      if (!deployedNetwork) {
        console.error('Contract not deployed on this network');
        return false;
      }

      this.contract = new this.web3.eth.Contract(
        FileEncryptionRegistryABI.abi,
        deployedNetwork.address
      );

      // Listen for account changes
      window.ethereum.on('accountsChanged', (accounts) => {
        this.account = accounts[0];
      });

      // Listen for network changes
      window.ethereum.on('chainChanged', () => {
        window.location.reload();
      });

      return true;
    } catch (error) {
      console.error('Blockchain connection error:', error);
      return false;
    }
  }

  // Key validation method
  validateKey(key) {
    // Check if key exists
    if (!key) {
        throw new Error('Encryption key is required');
    }

    // Check key length (adjust as needed)
    if (key.length < 16 || key.length > 512) {
        throw new Error('Invalid key length. Must be between 16 and 512 characters.');
    }

    // Optional: Less strict complexity check
    const complexityChecks = [
        /[A-Z]/.test(key),   // Uppercase
        /[a-z]/.test(key),   // Lowercase
        /[0-9]/.test(key),   // Numbers
        /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(key) // Special characters
    ];

    // Require at least 2 out of 4 complexity types
    const complexityCount = complexityChecks.filter(Boolean).length;

    if (complexityCount < 2) {
        throw new Error('Key complexity too low. Include at least 2 of: uppercase, lowercase, numbers, special characters');
    }

    return true;
}

// Alternative method with more lenient validation
sanitizeKey(key) {
    // Convert to string if not already
    if (typeof key !== 'string') {
        key = JSON.stringify(key);
    }

    // Remove potentially harmful characters
    key = key.replace(/[^\x20-\x7E]/g, '');

    // Truncate to maximum length if needed
    return key.substring(0, 512);
}

// Modify registerFileOnBlockchain method
async registerFileOnBlockchain(fileName, encryptionKey) {
  if (!this.contract || !this.account) {
      throw new Error('Blockchain not initialized');
  }

  try {
      // Validate and sanitize key
      this.validateKey(encryptionKey);
      const sanitizedKey = this.sanitizeKey(encryptionKey);

      console.log('Current account:', this.account);
      console.log('Contract address:', this.contract.options.address);

      // First, let's check if the user is an uploader
      try {
          const isUploaderStatus = await this.contract.methods.isUploader(this.account).call();
          console.log('Is user an uploader?', isUploaderStatus);
          
          if (!isUploaderStatus) {
              // If not an uploader, we might need to add them first
              console.warn('User is not an authorized uploader');
              // You might want to handle this case differently
          }
      } catch (error) {
          console.error('Error checking uploader status:', error);
      }

      // Try to send the transaction directly without estimating gas first
      console.log('Sending transaction...');
      
      try {
          const receipt = await this.contract.methods.registerFile(
              fileName,
              sanitizedKey
          ).send({
              from: this.account,
              gas: 800000, // Increase gas limit
              gasPrice: '20000000000' // 20 Gwei
          });

          console.log('Transaction receipt:', receipt);

          // Try to get fileId from receipt
          let fileId;

          // Method 1: From events
          if (receipt.events && receipt.events.FileRegistered) {
              fileId = receipt.events.FileRegistered.returnValues.fileId;
          } 
          // Method 2: From transaction logs
          else if (receipt.logs && receipt.logs.length > 0) {
              // The FileRegistered event signature
              const eventSignature = this.web3.utils.sha3('FileRegistered(bytes32,address,string,string)');
              
              for (const log of receipt.logs) {
                  if (log.topics[0] === eventSignature) {
                      // fileId is the first indexed parameter (topics[1])
                      fileId = log.topics[1];
                      break;
                  }
              }
          }

          // Method 3: Get from user files
          if (!fileId) {
              try {
                  const userFiles = await this.contract.methods.getUserFiles().call({ from: this.account });
                  if (userFiles && userFiles.length > 0) {
                      fileId = userFiles[userFiles.length - 1];
                  }
              } catch (error) {
                  console.error('Error fetching user files:', error);
              }
          }

          if (!fileId) {
              // Generate a fileId locally as a fallback
              const timestamp = Date.now();
              const combinedString = `${fileName}-${this.account}-${timestamp}`;
              fileId = this.web3.utils.sha3(combinedString);
              console.warn('Generated local fileId as fallback:', fileId);
          }

          return {
              fileId: fileId,
              transactionHash: receipt.transactionHash
          };

      } catch (sendError) {
          console.error('Transaction send error:', sendError);
          throw sendError;
      }

  } catch (error) {
      console.error('Blockchain file registration error:', error);
      throw error;
  }
}
  async getFileMetadata(fileId) {
    // Verify blockchain connection
    if (!this.contract) {
      throw new Error('Blockchain not initialized');
    }
    
    try {
      // Call contract method to get file metadata
      const metadata = await this.contract.methods
        .getFileMetadata(fileId)
        .call();
      
      // Return structured metadata
      return {
        uploader: metadata.uploader,
        fileName: metadata.fileName,
        encryptionKey: metadata.encryptionKey, // Changed from encryptionKeyHash
        uploadTimestamp: metadata.uploadTimestamp,
        isActive: metadata.isActive
      };
    } catch (error) {
      console.error('Error retrieving blockchain metadata:', error);
      throw error;
    }
  }

  // Additional method to check if user is an uploader
  async isUploader(address) {
    if (!this.contract) {
      throw new Error('Blockchain not initialized');
    }

    try {
      return await this.contract.methods.isUploader(address).call();
    } catch (error) {
      console.error('Error checking uploader status:', error);
      throw error;
    }
  }
  async debugContractSetup() {
    try {
        console.log('=== Contract Debug Info ===');
        console.log('Web3 version:', this.web3.version);
        console.log('Connected to network ID:', await this.web3.eth.net.getId());
        console.log('Current block number:', await this.web3.eth.getBlockNumber());
        console.log('Current account:', this.account);
        console.log('Account balance:', await this.web3.eth.getBalance(this.account));
        
        // Check if contract exists at the address
        const code = await this.web3.eth.getCode(this.contract.options.address);
        console.log('Contract code exists:', code !== '0x');
        
        // Try to call a simple view function
        try {
            const owner = await this.contract.methods.owner().call();
            console.log('Contract owner:', owner);
        } catch (error) {
            console.error('Error calling owner():', error);
        }
        
        try {
            const totalFiles = await this.contract.methods.totalFiles().call();
            console.log('Total files:', totalFiles);
        } catch (error) {
            console.error('Error calling totalFiles():', error);
        }
        
        console.log('=========================');
    } catch (error) {
        console.error('Debug error:', error);
    }
}

  // Cleanup method
  disconnect() {
    this.web3 = null;
    this.contract = null;
    this.account = null;
    this.networkId = null;
  }
}


export default BlockchainService;